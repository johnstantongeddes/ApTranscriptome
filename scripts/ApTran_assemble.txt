Aphaenogaster transcriptome assembly
=======================================

**Author:** [John Stanton-Geddes](john.stantongeddes.research@gmail.com)

Requires the following programs installed and available on path:

* [rlsim](https://github.com/sbotond/rlsim) to simulate Illumina RNAseq reads
* [simNGS](https://github.com/timmassingham/simNGS) to simulate reads 
* [Trim_Galore!](http://www.bioinformatics.babraham.ac.uk/projects/trim <- galore/)
  - requires [cutadapt](https://code.google.com/p/cutadapt/) and [FastQC](http://www.bioinformatics.babraham.ac.uk/projects/fastqc/)
* [khmer](https://github.com/ged-lab/khmer) to perform digital normalization and filtering
* [Trinity](http://trinityrnaseq.sourceforge.net/) for transcriptome assembly



```r
options(stringAsFactors = FALSE)

library(ggplot2)
```

```
## Loading required package: methods
```

```r
library(knitr)
opts_chunk$set(cache = TRUE)

source("assemble_functions.R")
```


## *in silico* spike-in ##

Simulate Illumina reads from known mRNA sequence to "spike-in" during transcriptome assembly.
Use these simluated reads to evaluate assembly at end.

Fasta file of known mRNA transcripts for simulated reads with known expression values.
I use a file with 1000 *Arabidopsis* mRNA transcripts downloaded from [European Nucleotide Archive](http://www.ebi.ac.uk/ena/home) 


```r
knownfasta <- "../data/ena.fasta"
system("mkdir -p ../data/sim")
simout <- "../data/sim"

# Randomly select X sequences; output 'known.fasta'
sample.fasta(knownfasta, 100)
```

```
## Loading required package: Biostrings
## Loading required package: BiocGenerics
## Loading required package: parallel
## 
## Attaching package: 'BiocGenerics'
## 
## The following objects are masked from 'package:parallel':
## 
##     clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
##     clusterExport, clusterMap, parApply, parCapply, parLapply,
##     parLapplyLB, parRapply, parSapply, parSapplyLB
## 
## The following object is masked from 'package:stats':
## 
##     xtabs
## 
## The following objects are masked from 'package:base':
## 
##     anyDuplicated, as.data.frame, cbind, colnames, duplicated,
##     eval, Filter, Find, get, intersect, lapply, Map, mapply,
##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,
##     Position, rank, rbind, Reduce, rep.int, rownames, sapply,
##     setdiff, sort, table, tapply, union, unique, unlist
## 
## Loading required package: IRanges
```

```
## Warning: reading FASTA file ../data/ena.fasta: ignored 10 invalid
## one-letter sequence codes
```

```r

## Move intermediate files
system(paste("mv mean-length-fasta.txt ", simout, sep = ""))

## Trim fasta titles to just ID
system("cut -f1 -d' ' known.fasta > known1.fasta")

## Assign expression-level to each sequence using the `sel` tool in
## [rlsim](https://github.com/sbotond/rlsim)

system("sel -d '1.0:g:(1500, 3)' known1.fasta > known-sim.fasta")
system("rm known.fasta known1.fasta")  # Clean-up temp files
message("Done with expression levels")
```

```
## Done with expression levels
```

```r

## Simulate fragments created during library prep using `rlsim`. Based on
## length of fragments estimated when using FLASH to pair reads, use
## empirical length distribution of 180 bp (SD: 20bp).

system("rlsim -v -n 150000 -d '1:n:(180, 20, 100, 500)' known-sim.fasta > known-sim-frags.fasta")
message("Done with simulated fragmentation levels")
```

```
## Done with simulated fragmentation levels
```

```r

## Generate simulated Illumina paired-end reads using
## [simNGS](http://www.ebi.ac.uk/goldman-srv/simNGS/) and a default runfile
## provided with simNGS output is 'reads_end1.fq' and 'reads_end2.fq'
system("cat known-sim-frags.fasta | simNGS -p paired -o fastq -O reads /opt/software/simNGS/data/s_3_4x.runfile")
message("Done with Illumina read simulation")
```

```
## Done with Illumina read simulation
```

```r

# move intermediate files
system(paste("mv rlsim_report.json ", simout, sep = ""))
system(paste("mv sel_report.pdf ", simout, sep = ""))

# move files to data directory
system("mv reads_end1.fq ../data/A22-si-R1.fastq")
system("mv reads_end2.fq ../data/A22-si-R2.fastq")
system("mv known-sim.fasta ../data/sim")
system("mv known-sim-frags.fasta ../data/sim")
```


## QC ##

Clip adapter sequence from reads and trim poor quality reads using Trim_Galore


```r
# Data directory
datadir <- "/home/data/Aphaeno_transcriptome/130509_SN1073_0326_BD25DAACXX/Project_Stanton-Geddes_Project_001"
# Directory to store results
system("mkdir -p ../data/trimclip")
clipdir <- "../data/trimclip"

# List of samples
samplist <- list.files(datadir)
(reads1 <- samplist[grep("A[r2]{1,2}-..-R1.fastq", samplist)])
```

```
##  [1] "A22-00-R1.fastq" "A22-03-R1.fastq" "A22-07-R1.fastq"
##  [4] "A22-10-R1.fastq" "A22-14-R1.fastq" "A22-17-R1.fastq"
##  [7] "A22-21-R1.fastq" "A22-24-R1.fastq" "A22-28-R1.fastq"
## [10] "A22-31-R1.fastq" "A22-35-R1.fastq" "A22-38-R1.fastq"
## [13] "Ar-00-R1.fastq"  "Ar-03-R1.fastq"  "Ar-07-R1.fastq" 
## [16] "Ar-10-R1.fastq"  "Ar-14-R1.fastq"  "Ar-17-R1.fastq" 
## [19] "Ar-21-R1.fastq"  "Ar-24-R1.fastq"  "Ar-28-R1.fastq" 
## [22] "Ar-31-R1.fastq"  "Ar-35-R1.fastq"  "Ar-38-R1.fastq"
```

```r
(reads2 <- samplist[grep("A[r2]{1,2}-..-R2.fastq", samplist)])
```

```
##  [1] "A22-00-R2.fastq" "A22-03-R2.fastq" "A22-07-R2.fastq"
##  [4] "A22-10-R2.fastq" "A22-14-R2.fastq" "A22-17-R2.fastq"
##  [7] "A22-21-R2.fastq" "A22-24-R2.fastq" "A22-28-R2.fastq"
## [10] "A22-31-R2.fastq" "A22-35-R2.fastq" "A22-38-R2.fastq"
## [13] "Ar-00-R2.fastq"  "Ar-03-R2.fastq"  "Ar-07-R2.fastq" 
## [16] "Ar-10-R2.fastq"  "Ar-14-R2.fastq"  "Ar-17-R2.fastq" 
## [19] "Ar-21-R2.fastq"  "Ar-24-R2.fastq"  "Ar-28-R2.fastq" 
## [22] "Ar-31-R2.fastq"  "Ar-35-R2.fastq"  "Ar-38-R2.fastq"
```

```r

# Loop across all the data files and trimclip

for (i in 1:length(reads1)) {
    # Run `trim_galore`.
    r1 <- paste(datadir, reads1[i], sep = "/")
    r2 <- paste(datadir, reads2[i], sep = "/")
    system(paste("trim_galore --quality 20 --phred33 --fastqc_args '--o", clipdir, 
        "' --length 20 --paired --output_dir", clipdir, r1, r2, sep = " "))
    message("Done with QC for sample: ", reads1[i])
}
```

```
## Done with QC for sample: A22-00-R1.fastq
## Done with QC for sample: A22-03-R1.fastq
## Done with QC for sample: A22-07-R1.fastq
## Done with QC for sample: A22-10-R1.fastq
## Done with QC for sample: A22-14-R1.fastq
## Done with QC for sample: A22-17-R1.fastq
## Done with QC for sample: A22-21-R1.fastq
## Done with QC for sample: A22-24-R1.fastq
## Done with QC for sample: A22-28-R1.fastq
## Done with QC for sample: A22-31-R1.fastq
## Done with QC for sample: A22-35-R1.fastq
## Done with QC for sample: A22-38-R1.fastq
## Done with QC for sample: Ar-00-R1.fastq
## Done with QC for sample: Ar-03-R1.fastq
## Done with QC for sample: Ar-07-R1.fastq
## Done with QC for sample: Ar-10-R1.fastq
## Done with QC for sample: Ar-14-R1.fastq
## Done with QC for sample: Ar-17-R1.fastq
## Done with QC for sample: Ar-21-R1.fastq
## Done with QC for sample: Ar-24-R1.fastq
## Done with QC for sample: Ar-28-R1.fastq
## Done with QC for sample: Ar-31-R1.fastq
## Done with QC for sample: Ar-35-R1.fastq
## Done with QC for sample: Ar-38-R1.fastq
```

```r

# Trimclip simulated spike-in reads
system(paste("trim_galore --quality 20 --phred33 --fastqc_args '--o", clipdir, 
    "' --length 20 --paired --output_dir", clipdir, "../data/A22-si-R1.fastq ../data/A22-si-R2.fastq", 
    sep = " "))
```



## Merge overlapping paired-end reads

With standard insert size of 200 bp and 2 x 100bp paired-end sequencing, many paired-reads are overlapping. FLASH attempts to merge paired-end reads when possible.


```r
# make new directory for merged reads
system("mkdir -p ../data/merged")
mergedir <- "../data/merged/"

# list of trimclipped samples
clippedlist <- list.files(clipdir)
(clippedR1 <- clippedlist[grep("A[r2]{1,2}-..-R1_val_1.fq$", clippedlist)])
```

```
##  [1] "A22-00-R1_val_1.fq" "A22-03-R1_val_1.fq" "A22-07-R1_val_1.fq"
##  [4] "A22-10-R1_val_1.fq" "A22-14-R1_val_1.fq" "A22-17-R1_val_1.fq"
##  [7] "A22-21-R1_val_1.fq" "A22-24-R1_val_1.fq" "A22-28-R1_val_1.fq"
## [10] "A22-31-R1_val_1.fq" "A22-35-R1_val_1.fq" "A22-38-R1_val_1.fq"
## [13] "A22-si-R1_val_1.fq" "Ar-00-R1_val_1.fq"  "Ar-03-R1_val_1.fq" 
## [16] "Ar-07-R1_val_1.fq"  "Ar-10-R1_val_1.fq"  "Ar-14-R1_val_1.fq" 
## [19] "Ar-17-R1_val_1.fq"  "Ar-21-R1_val_1.fq"  "Ar-24-R1_val_1.fq" 
## [22] "Ar-28-R1_val_1.fq"  "Ar-31-R1_val_1.fq"  "Ar-35-R1_val_1.fq" 
## [25] "Ar-38-R1_val_1.fq"
```

```r
(clippedR2 <- clippedlist[grep("A[r2]{1,2}-..-R2_val_2.fq$", clippedlist)])
```

```
##  [1] "A22-00-R2_val_2.fq" "A22-03-R2_val_2.fq" "A22-07-R2_val_2.fq"
##  [4] "A22-10-R2_val_2.fq" "A22-14-R2_val_2.fq" "A22-17-R2_val_2.fq"
##  [7] "A22-21-R2_val_2.fq" "A22-24-R2_val_2.fq" "A22-28-R2_val_2.fq"
## [10] "A22-31-R2_val_2.fq" "A22-35-R2_val_2.fq" "A22-38-R2_val_2.fq"
## [13] "A22-si-R2_val_2.fq" "Ar-00-R2_val_2.fq"  "Ar-03-R2_val_2.fq" 
## [16] "Ar-07-R2_val_2.fq"  "Ar-10-R2_val_2.fq"  "Ar-14-R2_val_2.fq" 
## [19] "Ar-17-R2_val_2.fq"  "Ar-21-R2_val_2.fq"  "Ar-24-R2_val_2.fq" 
## [22] "Ar-28-R2_val_2.fq"  "Ar-31-R2_val_2.fq"  "Ar-35-R2_val_2.fq" 
## [25] "Ar-38-R2_val_2.fq"
```

```r

# loop across data files and merge overlapping reads

for (j in 1:length(clippedR1)) {
    outpre <- strsplit(clippedR1[j], split = "-R")[[1]][1]
    sampR1 <- paste(clipdir, clippedR1[j], sep = "/")
    sampR2 <- paste(clipdir, clippedR2[j], sep = "/")
    
    system(paste("flash --phred-offset 33 --output-directory", mergedir, "--output-prefix", 
        outpre, sampR1, sampR2, sep = " "))
    message("Done with merging reads for sample: ", clippedR1[j])
}
```

```
## Done with merging reads for sample: A22-00-R1_val_1.fq
## Done with merging reads for sample: A22-03-R1_val_1.fq
## Done with merging reads for sample: A22-07-R1_val_1.fq
## Done with merging reads for sample: A22-10-R1_val_1.fq
## Done with merging reads for sample: A22-14-R1_val_1.fq
## Done with merging reads for sample: A22-17-R1_val_1.fq
## Done with merging reads for sample: A22-21-R1_val_1.fq
## Done with merging reads for sample: A22-24-R1_val_1.fq
## Done with merging reads for sample: A22-28-R1_val_1.fq
## Done with merging reads for sample: A22-31-R1_val_1.fq
## Done with merging reads for sample: A22-35-R1_val_1.fq
## Done with merging reads for sample: A22-38-R1_val_1.fq
## Done with merging reads for sample: A22-si-R1_val_1.fq
## Done with merging reads for sample: Ar-00-R1_val_1.fq
## Done with merging reads for sample: Ar-03-R1_val_1.fq
## Done with merging reads for sample: Ar-07-R1_val_1.fq
## Done with merging reads for sample: Ar-10-R1_val_1.fq
## Done with merging reads for sample: Ar-14-R1_val_1.fq
## Done with merging reads for sample: Ar-17-R1_val_1.fq
## Done with merging reads for sample: Ar-21-R1_val_1.fq
## Done with merging reads for sample: Ar-24-R1_val_1.fq
## Done with merging reads for sample: Ar-28-R1_val_1.fq
## Done with merging reads for sample: Ar-31-R1_val_1.fq
## Done with merging reads for sample: Ar-35-R1_val_1.fq
## Done with merging reads for sample: Ar-38-R1_val_1.fq
```


## Digital normalization

Normalize reads using khmer

## Transcriptome assemly

Use Trinity for transcriptome assembly.
Requires reads split into 'left' and 'right' files.
Combine all *.notCombined into reads 1 and 2

cat *.1 > Ap-r1.fq
cat *.2 > Ap-r2.fq

Add *.extendedFrags to left reads

Run Trinity

Trinity.pl --seqType fq --JM 50G --left Ap-r1.fq Ap-r2.fq --output 
